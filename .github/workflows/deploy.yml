name: Deploy to EC2

on:
  workflow_run:
    workflows: ["Copy Files to EC2"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy using Docker Compose on EC2
      env:
        IMAGE_TAG: ${{ github.sha }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "Sending command to instance: ${{ secrets.EC2_INSTANCE_ID }}"

        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy on EC2" \
          --parameters "commands=[
              \"#!/bin/bash\",
              \"cd /home/ubuntu || cd /tmp || exit 1\",
              \"export HOME=/home/ubuntu\",
              
              \"echo '=== Cleaning up disk space ==='\",
              \"docker system prune -af --volumes\",
              \"docker image prune -af\",
              \"sudo apt-get autoremove -y\",
              \"sudo apt-get autoclean\",
              
              \"echo '=== Setting up repository ==='\",
              \"git config --global --add safe.directory /home/ubuntu/OCR1_project\",
              \"cd /home/ubuntu/OCR1_project\",
              
              \"echo '=== Setting file permissions ==='\",
              \"sudo chown -R ubuntu:ubuntu /home/ubuntu/OCR1_project\",
              \"chmod +x *.sh 2>/dev/null || true\",
              \"chmod 644 docker-compose.yml\",
              \"chmod 644 *.py 2>/dev/null || true\",
              
              \"echo '=== Docker login and pull ==='\",
              \"echo '$DOCKER_PASSWORD' | docker login -u '$DOCKER_USERNAME' --password-stdin\",
              \"docker pull jjp006/ocr1:${IMAGE_TAG}\",
              \"docker tag jjp006/ocr1:${IMAGE_TAG} jjp006/ocr1:latest\",
              
              \"echo '=== Stopping existing containers ==='\",
              \"export IMAGE_TAG=${IMAGE_TAG}\",
              \"envsubst < docker-compose.yml > docker-compose.generated.yml\",
              \"docker-compose -f docker-compose.generated.yml down --remove-orphans || true\",
              
              \"echo '=== Starting new containers ==='\",
              \"docker-compose -f docker-compose.generated.yml up -d --build --force-recreate\",
              
              \"echo '=== Debugging WSGI setup ==='\",
              \"docker exec ocr_web ls -la /app/ | head -10\",
              \"docker exec ocr_web cat /app/gevent_patch.py 2>/dev/null || echo 'gevent_patch.py not found'\",
              \"docker exec ocr_web python -c 'import gevent_patch; print(dir(gevent_patch))' 2>/dev/null || echo 'Cannot import gevent_patch'\",
              
              \"echo '=== Waiting for application to start ==='\",
              \"sleep 30\",
              
              \"echo '=== Checking container status ==='\",
              \"docker ps -a\",
              \"docker logs ocr_web --tail 50\",
              
              \"echo '=== Checking ports ==='\",
              \"sudo ss -tulpn | grep -E ':8000|:80'\",
              
              \"echo '=== Testing application ==='\",
              \"for i in {1..5}; do\",
              \"  if curl -f http://localhost:8000; then\",
              \"    echo 'App is ready!'\",
              \"    break\",
              \"  else\",
              \"    echo \\\"Attempt $i: App not ready, waiting 10 seconds...\\\"\",
              \"    sleep 10\",
              \"  fi\",
              \"done\",
              
              \"echo '=== Restarting nginx ==='\",
              \"sudo systemctl restart nginx\",
              \"sudo systemctl status nginx --no-pager -l\",
              
              \"echo '=== Final status check ==='\",
              \"curl -I http://localhost || echo 'Nginx check failed'\",
              \"df -h | head -5\"
            ]" \
        --query 'Command.CommandId' \
        --output text)
        
        echo "Command ID: $COMMAND_ID"
        
        # Wait for completion (timeout after 60 seconds)
        echo -e "Waiting for command to complete...\n"
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --cli-read-timeout 60
        
        # Show the results
        echo "=== COMMAND OUTPUT ==="
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'StandardOutputContent' \
          --output text
        
        echo "=== COMMAND STATUS ==="
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'Status' \
          --output text