name: Deploy to EC2

on:
  push:
    branches:
      - main   # or any branch you use

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ocr1_key.pem
        chmod 600 ~/.ssh/ocr1_key.pem

    - name: Copy project files to EC2
      run: |
        rsync -avz -e "ssh -i ~/.ssh/ocr1_key.pem -o StrictHostKeyChecking=no" ./ ubuntu@${{ secrets.EC2_PUBLIC_IP_HOST }}:~/OCR1_project/

    - name: Deploy using Docker Compose on EC2
      env:
        IMAGE_TAG: ${{ github.sha }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        ssh -i ~/.ssh/ocr1_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP_HOST }} << EOF
          cd ~/OCR1_project
          
          # Clean up disk space
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/apt/lists/*
          sudo docker system prune -af
          
          # Stop any existing containers and remove them
          docker-compose down --remove-orphans
          
          # Check if port 8000 is in use and kill the process if it is
          if lsof -i :8000; then
            sudo lsof -i :8000 | grep LISTEN | awk '{print $2}' | xargs -r sudo kill -9
          fi
          
          # Login to Docker Hub
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          
          # Pull and deploy
          IMAGE_TAG=$IMAGE_TAG docker-compose pull
          IMAGE_TAG=$IMAGE_TAG docker-compose up -d
          
          # Update Nginx configuration
          sudo tee /etc/nginx/sites-available/ocr1 << 'NGINX'
          server {
              listen 80;
              server_name _;

              location / {
                  proxy_pass http://127.0.0.1:8000;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          NGINX
          
          # Create symbolic link if it doesn't exist
          sudo ln -sf /etc/nginx/sites-available/ocr1 /etc/nginx/sites-enabled/
          
          # Test and restart Nginx
          sudo nginx -t && sudo systemctl restart nginx
        EOF

    - name: Clean up SSH key
      run: rm ~/.ssh/ocr1_key.pem

        