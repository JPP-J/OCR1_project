name: Deploy to EC2

on:
  workflow_run:
    workflows: ["Copy Files to EC2"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy using Docker Compose on EC2
      env:
        IMAGE_TAG: ${{ github.sha }}
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "Sending command to instance: ${{ secrets.EC2_INSTANCE_ID }}"

        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --comment "Deploy on EC2" \
          --parameters "commands=[
              "#!/bin/bash",
              "cd /home/ubuntu || cd /tmp || exit 1",
              "export HOME=/home/ubuntu ",
              "git config --global --add safe.directory /home/ubuntu/OCR1_project",
              "echo \"=== Starting deployment ===\"",
              "cd /home/ubuntu/OCR1_project",
              "echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin",
              "docker pull jjp006/ocr1:${IMAGE_TAG}",
              "docker tag jjp006/ocr1:${IMAGE_TAG} jjp006/ocr1:latest",
              "export IMAGE_TAG=${IMAGE_TAG}",
              "envsubst < docker-compose.yml > docker-compose.generated.yml",
              "docker-compose -f docker-compose.generated.yml down --remove-orphans",
              "docker-compose -f docker-compose.generated.yml up -d --build --force-recreate",
              "docker ps -a",
              "docker logs ocr_web",
              "curl -f http://localhost:8000 || echo \"App not ready yet\"",
              "sudo systemctl restart nginx"
            ]" \
        --query 'Command.CommandId' \
        --output text)
        
        echo "Command ID: $COMMAND_ID"
        
        # Wait for completion (timeout after 60 seconds)
        echo -e "Waiting for command to complete...\n"
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --cli-read-timeout 60
        
        # Show the results
        echo "=== COMMAND OUTPUT ==="
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'StandardOutputContent' \
          --output text
        
        echo "=== COMMAND STATUS ==="
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'Status' \
          --output text