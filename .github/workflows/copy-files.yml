name: Copy Files to EC2

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches:
      - main

jobs:
  copy-files:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Send Git clone-pull command to EC2
      env: 
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB }}
          COMMIT_SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
      run: |
        echo "Sending command to instance: ${{ secrets.EC2_INSTANCE_ID }}"

        # Send command and capture the command ID
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --comment "Cloning repo on EC2" \
          --parameters "commands=[
              \"#!/bin/bash\",
              \"cd /home/ubuntu || cd /tmp || exit 1\",
              \"export HOME=/home/ubuntu \",
              \"echo '=== Starting deployment ==='\",
              \"git config --global --add safe.directory /home/ubuntu/OCR1_project\",
              \"# Check if repo exists, if not clone it first\",
              \"if [ ! -d /home/ubuntu/OCR1_project ]; then\",
              \"  echo 'Repository not found, cloning for first time...'\",
              \"  git clone https://${GITHUB_TOKEN}@github.com/${REPO} /home/ubuntu/OCR1_project\",
              \"else\",
              \"  echo 'Repository exists, updating...'\",
              \"fi\",
              \"cd /home/ubuntu/OCR1_project || exit 1\",
              \"echo '=== Fetching latest changes ==='\",
              \"git fetch origin\",
              \"echo '=== Resetting to specific commit: ${COMMIT_SHA} ==='\",
              \"git reset --hard ${COMMIT_SHA}\",
              \"echo '=== Cleaning untracked files ==='\",
              \"git clean -fd\",
              \"echo '=== Current commit info ==='\",
              \"git log -1 --oneline\",
              \"echo '=== Listing project files ==='\",
              \"ls -la /home/ubuntu/OCR1_project\"
            ]" \
          --query 'Command.CommandId' \
          --output text)
      
        echo "Command ID: $COMMAND_ID"
      
        # Wait for completion with error handling
        echo -e "Waiting for command to complete...\n"
        set +e
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --cli-read-timeout 60
        WAIT_EXIT_CODE=$?
        set -e
      
        # Show results
        echo "=== COMMAND OUTPUT ==="
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'StandardOutputContent' \
          --output text
      
        echo "=== COMMAND ERRORS ==="
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'StandardErrorContent' \
          --output text
      
        echo "=== COMMAND STATUS ==="
        STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id ${{ secrets.EC2_INSTANCE_ID }} \
          --query 'Status' \
          --output text)
        echo "Status: $STATUS"
      
        if [ "$STATUS" = "Failed" ]; then
          echo "Deployment failed!"
          exit 1
        fi